module lcd(
	input CLOCK,
	input ASYNC_RST,
	output reg LCD_RS,
	output LCD_RW,
	output LCD_EN,
	output reg [7:0] LCD_DATA
);
	parameter	INIT_STATE	=	0;	// Initialization state
	parameter	LOAD_STATE	=	1;	// Loading instruction state
	parameter	PUSH_STATE	=	2;	// Pushing instruction state
	parameter	IDLE_STATE	=	3;	// Standby state

	reg [5:0] index;
	reg [2:0] state;

	always @(posedge CLOCK, negedge ASYNC_RST) begin
		if (!ASYNC_RST) begin
			index <= 0;
			state <= INIT_STATE;
		end
		else begin
			case (state)
				INIT_STATE: begin
					index <= 0;
					state <= LOAD_STATE;
				end
				LOAD_STATE: begin
					state <= (index > 36 ? IDLE_STATE : PUSH_STATE);
				end
				PUSH_STATE: begin
					index <= index + 1;
					state <= LOAD_STATE;
				end
				IDLE_STATE : begin
					state <= IDLE_STATE;
				end
				default: begin
					index <= 0;
					state <= INIT_STATE;
				end
			endcase
		end
	end

	assign LCD_EN = (state == PUSH_STATE);
	assign LCD_RW = 0;
	
	always @(*) begin
		case (index)
				  0: {LCD_RS, LCD_DATA} = {1'b0, 8'b0011_1000};		// Function set: 8-bit operation, 2-line display, 5x8 dot character font
				  1: {LCD_RS, LCD_DATA} = {1'b0, 8'b0000_0110};		// Entry mode set: Move cursor to the right every time a character is written
				  2: {LCD_RS, LCD_DATA} = {1'b0, 8'b0000_0001};		// Clear display
												
				  3: {LCD_RS, LCD_DATA} = {1'b1,  "A"};
				  4: {LCD_RS, LCD_DATA} = {1'b1,  "B"};
				  5: {LCD_RS, LCD_DATA} = {1'b1,  "C"};
				  6: {LCD_RS, LCD_DATA} = {1'b1,  "D"};
				  7: {LCD_RS, LCD_DATA} = {1'b1,  "E"};
				  8: {LCD_RS, LCD_DATA} = {1'b1,  "F"};
				  9: {LCD_RS, LCD_DATA} = {1'b1,  "G"};
				 10: {LCD_RS, LCD_DATA} = {1'b1,  "H"};
				 11: {LCD_RS, LCD_DATA} = {1'b1,  "I"};
				 12: {LCD_RS, LCD_DATA} = {1'b1,  "J"};
				 13: {LCD_RS, LCD_DATA} = {1'b1,  "K"};
				 14: {LCD_RS, LCD_DATA} = {1'b1,  "L"};
				 15: {LCD_RS, LCD_DATA} = {1'b1,  "M"};
				 16: {LCD_RS, LCD_DATA} = {1'b1,  "N"};
				 17: {LCD_RS, LCD_DATA} = {1'b1,  "O"};
				 18: {LCD_RS, LCD_DATA} = {1'b1,  "P"};
			 
				 19: {LCD_RS, LCD_DATA} = {1'b0, 8'b1100_0000};		// Set DDRAM address: Move cursor to the beginning of second line
			 	
				 20: {LCD_RS, LCD_DATA} = {1'b1,  "a"};
				 21: {LCD_RS, LCD_DATA} = {1'b1,  "b"};
				 22: {LCD_RS, LCD_DATA} = {1'b1,  "c"};
				 23: {LCD_RS, LCD_DATA} = {1'b1,  "d"};
				 24: {LCD_RS, LCD_DATA} = {1'b1,  "e"};
				 25: {LCD_RS, LCD_DATA} = {1'b1,  "f"};
				 26: {LCD_RS, LCD_DATA} = {1'b1,  "g"};
				 27: {LCD_RS, LCD_DATA} = {1'b1,  "h"};
				 28: {LCD_RS, LCD_DATA} = {1'b1,  "i"};
				 29: {LCD_RS, LCD_DATA} = {1'b1,  "j"};
				 30: {LCD_RS, LCD_DATA} = {1'b1,  "k"};
				 31: {LCD_RS, LCD_DATA} = {1'b1,  "l"};
				 32: {LCD_RS, LCD_DATA} = {1'b1,  "m"};
				 33: {LCD_RS, LCD_DATA} = {1'b1,  "n"};
				 34: {LCD_RS, LCD_DATA} = {1'b1,  "o"};
				 35: {LCD_RS, LCD_DATA} = {1'b1,  "p"};

			default: {LCD_RS, LCD_DATA} = {1'b0, 8'b1000_0000};		// Set DDRAM address: Move cursor to the beginning of first line
		endcase 
	end
endmodule 